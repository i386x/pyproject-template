#
# File:    ./tox.ini
# Author:  {{ cookiecutter.team_name }} <{{ cookiecutter.team_email|replace('@', ' AT ') }}>
# Date:    {% raw %}{{ stamp() }}{% endraw %}
# Project: {{ cookiecutter.project_name }}: {{ cookiecutter.project_description }}
# Brief:   Configuration for tox
#
# SPDX-License-Identifier: MIT
#

[tox]
envlist =
    py{% raw %}{{ supported_pythons }}{% endraw %}, linters
skip_missing_interpreters = True
skipsdist = True

[testenv]
setenv =
    PYTHONPATH=src
skip_install = True
description =
    {envname}: Run unit tests for {envname}
deps =
    pip >= 19.2
    safety
    unittest2
    pytest
    pytest-cov
    coveralls
{% raw -%}
{% for item in requirements %}
    {{ item }}
{% endfor %}
{% endraw %}
commands =
    safety check --full-report
    pytest --cov={{ cookiecutter.namespace }}{{ '.' if cookiecutter.namespace != '.remove.me' }}{{ cookiecutter.package_name }} --cov-report=term-missing tests
    {env:COVERALLS_CMD:coveralls --output={envname}-coverage.txt}

[linters]
envdir = {toxworkdir}/env-linters
basepython = python3

[testenv:black]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run formatting checks
deps =
    black
commands =
    black --check --diff .

[testenv:isort]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run import order checks
deps =
    isort
commands =
    isort --diff -c .

[testenv:pylint]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run static code checks
deps =
    unittest2
    pylint
{% raw -%}
{% for item in requirements %}
    {{ item }}
{% endfor %}
{% endraw %}
commands =
    pylint setup.py src/{{ cookiecutter.namespace }}{{ '/' if cookiecutter.namespace != '.remove.me' }}{{ cookiecutter.package_name }} tests/unit

[testenv:flake8]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run style checks
deps =
    flake8
    flake8-logging-format
commands =
    flake8

[testenv:mypy]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run type checks
deps =
    mypy
commands =
    mypy src/{{ cookiecutter.namespace }}{{ '/' if cookiecutter.namespace != '.remove.me' }}{{ cookiecutter.package_name }}

[testenv:bandit]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run security analyzer
deps =
    bandit
commands =
    bandit -vlir setup.py src/{{ cookiecutter.namespace }}{{ '/' if cookiecutter.namespace != '.remove.me' }}{{ cookiecutter.package_name }} tests/unit

[testenv:pydocstyle]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run doc strings checks
deps =
    pydocstyle
commands =
    pydocstyle setup.py src/{{ cookiecutter.namespace }}{{ '/' if cookiecutter.namespace != '.remove.me' }}{{ cookiecutter.package_name }} tests/unit

[testenv:linters]
envdir = {[linters]envdir}
basepython = {[linters]basepython}
description =
    {envname}: Run linters
deps =
    {[testenv:black]deps}
    {[testenv:isort]deps}
    {[testenv:pylint]deps}
    {[testenv:flake8]deps}
    {[testenv:mypy]deps}
    {[testenv:bandit]deps}
    {[testenv:pydocstyle]deps}
commands =
    {[testenv:black]commands}
    {[testenv:isort]commands}
    {[testenv:pylint]commands}
    {[testenv:flake8]commands}
    {[testenv:mypy]commands}
    {[testenv:bandit]commands}
    {[testenv:pydocstyle]commands}
